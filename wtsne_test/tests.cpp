#include "weighted_tsne.h"

void save_as_csv(std::vector<float> data, int N, int output_dims, std::string filename) {

	std::ofstream out_file2(filename);

	for (int i = 0; i < N; i++) {
		std::string line = "";

		for (int d = 0; d < output_dims; d++) {
			int index = i * output_dims + d;
			line += std::to_string(data[index]);

			if (d < (output_dims - 1)) {
				line += ",";
			}
		}

		out_file2 << line << std::endl;
	}

	out_file2.close();
}

void save_as_csv(std::vector<int> data, int N, int output_dims, std::string filename) {

	std::ofstream out_file2(filename);
	out_file2 << "";

	for (int i = 0; i < N; i++) {
		std::string line = "";

		for (int d = 0; d < output_dims; d++) {
			int index = i * output_dims + d;
			line += std::to_string(data[index]);

			if (d < (output_dims - 1)) {
				line += ",";
			}
		}

		out_file2 << line << std::endl;
	}

	out_file2.close();
}


void test_jaccard_similarity() {
	std::vector<int> A = { 1, 2, 3, 4, 5 };
	std::vector<int> B = { 1, 2, 3, 6, 7 };

	weighted_tsne* wt = new weighted_tsne();

	std::cout << std::to_string(wt->jaccard_similarity(A, B));

	delete wt;
}

void test_levenshtein_distance() {
	std::vector<int> v1 = { 4,2,1 };
	std::vector<int> v2 = { 1,2,4 };

	weighted_tsne* wt = new weighted_tsne();

	std::cout << std::to_string(wt->levenshtein_distance(v1, v2));

	delete wt;
}

void test_test_set_error() {

	weighted_tsne* wt = new weighted_tsne();

	{
		//Data Points 1 : (0) (1)    (2) (3)
		//Data Points 2 : (0) (2)    (1) (3)

		std::vector<int> NN1({
			0, 1, 2,
			1, 0, 2,
			2, 3, 1,
			3, 2, 1,
			});

		std::vector<int> NN2({
			0, 2, 1,
			1, 3, 2,
			2, 0, 1,
			3, 1, 2,
			});

		std::vector<float> errors;
		wt->calculate_set_error(NN1, NN2, errors, 4, 4, 2);

		// Manually: 0, 0.667, 0.667, 0

		for (float e : errors) {
			std::cout << std::to_string(e) << ", ";
		}
		std::cout << "\n";
	}

	{
		//Data Points 1 : (0) (1)    (2) (3)
		//Data Points 2 : (0) (2)    (1) (3)

		std::vector<int> NN1({
		0, 1, 2, 3,
		1, 0, 2, 3,
		2, 3, 1, 0,
		3, 2, 1, 0
		});

		std::vector<int> NN2({
		0, 2, 1, 3,
		1, 3, 2, 0,
		2, 0, 1, 3,
		3, 1, 2, 0
		});

		std::vector<float> errors;
		wt->calculate_set_error(NN1, NN2, errors, 4, 4, 3);

		// Manually: 0, 0, 0, 0

		for (float e : errors) {
			std::cout << std::to_string(e) << ", ";
		}
		std::cout << "\n";
	}

	delete wt;
}

void test_neighourhood_computation() {
	weighted_tsne* wt = new weighted_tsne();

	//Data Points : (0) (1)    (2) (3)
	// Neighbourhood
	// 0 1 2 3
	// 1 0 2 3
	// 2 3 1 0
	// 3 2 1 0

	std::vector<float> data = { 0, 1,  1, 1,  3, 1,  4, 1 };
	std::vector<int> res;
	wt->compute_neighbours(data, 4, 2, 3, res);
	save_as_csv(res, 4, 4, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/test-neighbourhood.csv");

	delete wt;
}

void test_create_embedding() {
	hdi::utils::CoutLog log;

	weighted_tsne* wt = new weighted_tsne();

	// Set tSNE parameters
	int N = 10000;
	int input_dims = 784;
	int output_dims = 2;
	int iterations = 1000;

	wt->tSNE.setTheta(0.5); // Barnes-hut
	//wt->tSNE.setTheta(0); // Exact
	//wt->tSNE.setTheta(0.0001); // Almost exact but BH

	wt->tSNE_param._mom_switching_iter = 250;
	wt->tSNE_param._remove_exaggeration_iter = 250;
	wt->tSNE_param._embedding_dimensionality = output_dims;

	// STEP 1: Set selected points

	// No selected points
	//std::vector<int> selectedPoints{};

	// MNIST 10k
	// The zeros
	//std::set<int> selectedPoints{ 5, 22, 23, 26, 34, 36, 37, 39, 43, 55, 73, 92, 98, 102, 115, 117, 129, 135, 171, 202, 211, 240, 243, 257, 259, 267, 271, 273, 275, 277, 279, 282, 284, 296, 306, 309, 335, 339, 342, 349, 352, 354, 365, 366, 369, 390, 398, 405, 406, 412, 432, 444, 461, 470, 495, 496, 498, 514, 521, 538, 539, 564, 606, 614, 630, 634, 635, 666, 667, 677, 678, 696, 701, 704, 711, 712, 727, 740, 745, 746, 771, 795, 796, 801, 804, 807, 819, 876, 879, 880, 909, 914, 925, 930, 934, 999, 1020, 1030, 1067, 1081, 1082, 1091, 1095, 1103, 1126, 1141, 1145, 1147, 1148, 1163, 1188, 1196, 1202, 1208, 1214, 1289, 1302, 1321, 1330, 1337, 1342, 1348, 1367, 1375, 1389, 1390, 1402, 1411, 1414, 1427, 1434, 1437, 1461, 1462, 1468, 1477, 1501, 1512, 1533, 1546, 1571, 1573, 1578, 1580, 1587, 1608, 1609, 1610, 1611, 1612, 1614, 1620, 1639, 1676, 1693, 1694, 1703, 1713, 1720, 1723, 1735, 1743, 1779, 1783, 1791, 1795, 1810, 1814, 1828, 1834, 1837, 1845, 1846, 1850, 1862, 1865, 1885, 1917, 1931, 1935, 1941, 1944, 1966, 1967, 1972, 1976, 1980, 1984, 1996, 2003, 2007, 2009, 2011, 2028, 2029, 2030, 2042, 2051, 2058, 2066, 2070, 2078, 2082, 2100, 2120, 2142, 2153, 2167, 2178, 2184, 2199, 2201, 2211, 2215, 2225, 2239, 2244, 2266, 2268, 2274, 2279, 2293, 2296, 2300, 2316, 2322, 2328, 2343, 2347, 2351, 2361, 2369, 2376, 2385, 2390, 2395, 2402, 2403, 2404, 2435, 2449, 2450, 2461, 2463, 2467, 2478, 2495, 2498, 2503, 2504, 2507, 2510, 2537, 2563, 2575, 2588, 2596, 2598, 2599, 2611, 2615, 2636, 2645, 2649, 2660, 2662, 2678, 2687, 2688, 2698, 2703, 2723, 2727, 2730, 2737, 2744, 2752, 2761, 2764, 2766, 2767, 2769, 2774, 2777, 2782, 2809, 2831, 2837, 2859, 2864, 2866, 2870, 2878, 2884, 2887, 2889, 2895, 2898, 2903, 2904, 2920, 2929, 2943, 2948, 2952, 2953, 2955, 2956, 2976, 2979, 2984, 2986, 2995, 2996, 3002, 3009, 3016, 3034, 3040, 3046, 3057, 3067, 3072, 3077, 3078, 3079, 3090, 3106, 3112, 3114, 3115, 3124, 3131, 3144, 3165, 3166, 3178, 3186, 3192, 3198, 3213, 3222, 3236, 3242, 3243, 3248, 3262, 3276, 3281, 3294, 3312, 3326, 3349, 3353, 3360, 3365, 3366, 3379, 3380, 3387, 3391, 3407, 3462, 3466, 3484, 3499, 3521, 3534, 3536, 3542, 3576, 3578, 3583, 3589, 3603, 3609, 3618, 3621, 3623, 3638, 3644, 3653, 3654, 3684, 3686, 3706, 3722, 3733, 3751, 3755, 3766, 3779, 3793, 3804, 3821, 3852, 3882, 3906, 3925, 3935, 3959, 3970, 3973, 3976, 4011, 4012, 4035, 4050, 4052, 4053, 4059, 4062, 4076, 4087, 4089, 4090, 4101, 4115, 4133, 4144, 4163, 4176, 4198, 4201, 4204, 4207, 4220, 4223, 4241, 4247, 4254, 4258, 4260, 4273, 4274, 4289, 4294, 4305, 4316, 4328, 4338, 4357, 4362, 4367, 4375, 4376, 4380, 4388, 4395, 4396, 4407, 4410, 4423, 4426, 4428, 4436, 4468, 4487, 4490, 4498, 4499, 4519, 4521, 4525, 4530, 4531, 4533, 4537, 4551, 4569, 4577, 4579, 4591, 4601, 4618, 4627, 4639, 4651, 4667, 4672, 4679, 4684, 4719, 4728, 4737, 4739, 4767, 4775, 4779, 4787, 4807, 4822, 4823, 4834, 4835, 4839, 4840, 4842, 4843, 4851, 4856, 4866, 4887, 4908, 4921, 4922, 4950, 4959, 4961, 4994, 5009, 5019, 5022, 5040, 5042, 5048, 5082, 5095, 5102, 5107, 5108, 5121, 5127, 5129, 5134, 5148, 5152, 5168, 5190, 5199, 5202, 5204, 5208, 5227, 5233, 5254, 5283, 5285, 5317, 5343, 5347, 5348, 5356, 5358, 5372, 5375, 5379, 5382, 5383, 5389, 5405, 5423, 5427, 5433, 5436, 5460, 5464, 5466, 5477, 5486, 5494, 5497, 5498, 5499, 5502, 5514, 5517, 5530, 5535, 5540, 5553, 5566, 5579, 5580, 5593, 5629, 5641, 5648, 5657, 5658, 5660, 5672, 5684, 5699, 5708, 5716, 5739, 5759, 5779, 5786, 5800, 5812, 5820, 5828, 5833, 5834, 5837, 5848, 5850, 5854, 5856, 5876, 5887, 5890, 5893, 5894, 5896, 5898, 5899, 5900, 5924, 5926, 5944, 5948, 5950, 5951, 5960, 5965, 5968, 5973, 5974, 5979, 6005, 6016, 6022, 6053, 6062, 6064, 6070, 6073, 6074, 6079, 6109, 6120, 6132, 6136, 6183, 6186, 6190, 6202, 6206, 6208, 6213, 6217, 6235, 6241, 6272, 6283, 6287, 6296, 6304, 6313, 6314, 6329, 6333, 6335, 6354, 6362, 6377, 6408, 6430, 6438, 6448, 6456, 6457, 6475, 6484, 6501, 6526, 6536, 6545, 6563, 6599, 6602, 6603, 6606, 6608, 6623, 6627, 6641, 6646, 6670, 6674, 6697, 6719, 6720, 6724, 6729, 6755, 6764, 6774, 6786, 6787, 6822, 6829, 6838, 6840, 6857, 6869, 6878, 6881, 6887, 6888, 6890, 6910, 6912, 6916, 6928, 6955, 6959, 6974, 6985, 6988, 6994, 6995, 7002, 7007, 7029, 7041, 7048, 7052, 7054, 7068, 7092, 7098, 7110, 7113, 7122, 7130, 7150, 7155, 7169, 7190, 7196, 7201, 7209, 7222, 7242, 7251, 7253, 7259, 7270, 7271, 7288, 7292, 7309, 7325, 7326, 7368, 7374, 7390, 7391, 7394, 7431, 7457, 7475, 7483, 7486, 7490, 7503, 7506, 7547, 7551, 7566, 7570, 7571, 7575, 7578, 7581, 7582, 7596, 7611, 7621, 7637, 7651, 7673, 7690, 7698, 7720, 7739, 7755, 7777, 7793, 7809, 7814, 7828, 7849, 7853, 7854, 7856, 7888, 7893, 7910, 7919, 7928, 7939, 7945, 7963, 7979, 8011, 8038, 8054, 8058, 8082, 8089, 8114, 8118, 8121, 8126, 8128, 8138, 8155, 8156, 8168, 8169, 8187, 8193, 8196, 8244, 8245, 8257, 8261, 8266, 8269, 8279, 8281, 8284, 8286, 8289, 8317, 8319, 8321, 8341, 8358, 8376, 8411, 8412, 8414, 8419, 8426, 8428, 8429, 8433, 8441, 8452, 8484, 8485, 8493, 8525, 8545, 8548, 8553, 8559, 8571, 8584, 8603, 8608, 8611, 8628, 8644, 8647, 8660, 8666, 8670, 8674, 8686, 8692, 8694, 8709, 8716, 8726, 8731, 8736, 8739, 8742, 8752, 8779, 8783, 8801, 8804, 8811, 8812, 8820, 8845, 8877, 8884, 8907, 8918, 8966, 8972, 8994, 9033, 9037, 9042, 9079, 9082, 9090, 9106, 9108, 9131, 9166, 9172, 9180, 9211, 9220, 9224, 9227, 9255, 9263, 9278, 9294, 9313, 9317, 9333, 9336, 9354, 9358, 9374, 9402, 9421, 9425, 9434, 9436, 9442, 9448, 9452, 9458, 9460, 9469, 9476, 9480, 9485, 9499, 9500, 9503, 9519, 9528, 9534, 9545, 9555, 9567, 9594, 9601, 9610, 9616, 9626, 9638, 9656, 9675, 9710, 9717, 9730, 9735, 9736, 9745, 9748, 9771, 9775, 9783, 9786, 9789, 9802, 9810, 9811, 9820, 9822, 9838, 9845, 9847, 9856, 9859, 9862, 9868, 9877, 9892, 9894, 9908, 9911, 9919, 9920, 9926, 9932, 9947, 9956, 9962, 9963, 9968 };
	//std::set<int> selectedPoints{ 5, 22, 23, 26, 34, 36, 37, 39, 43, 55, 73, 92, 98, 102, 115, 117, 129, 135, 171, 202, 211, 240, 243, 257, 259, 267, 271, 273, 275, 277, 279, 282, 284, 296, 306, 309, 335, 339, 342, 349, 352, 354, 365, 366, 369, 390, 398 };
	
	// Some Threes
	//std::set<int> selectedPoints{ 1,3,21,29,59,76,101,113,120,133,134,136,137,140,141,145,152,166,167,175,190,193,204,207,221,236,245,246,262,287,290,297,310,311,313,315,316,321,333,372,380,387,393,395,397,401,403,415,457,478,482,487,494,504,518,547,565,580,584,605,645,662,679,702,703,705,717,757,776,791,792,817,825,826,828,830,866,901,905,906,907,908,912,915,926,931,935,936,941,947,968,976,1003,1008,1029,1041,1058,1079,1090,1100,1115,1119,1124,1176,1177,1191,1197,1212,1230,1237,1239,1267,1278,1297,1305,1320,1323,1329,1338,1351,1356,1379,1380,1399,1407,1412,1418,1428,1429,1439,1441,1455,1465,1478,1481,1496,1508,1515,1526,1537,1540,1545,1554,1559,1563,1574,1586,1592,1605,1617,1621,1622,1627,1628,1633,1635,1638,1640,1644,1645,1656,1658,1666,1679,1684,1690,1698,1722,1732,1754,1766,1775,1787,1802,1809,1860,1879,1895,1908,1912,1918,1933,1936,1956,1977,2006,2022,2025,2034,2037,2050,2054,2073,2074,2077,2080,2110,2124,2133,2177,2188,2213,2216,2265,2269,2270,2281,2286,2288,2309,2310,2312,2318,2324,2339,2342,2346,2388,2391,2405,2407,2418,2419,2421,2429,2443,2471,2472,2474,2481,2490,2505,2506,2534,2545,2550,2562,2565,2583,2590,2672,2679,2692,2695,2719,2721,2734,2742,2753,2758,2781,2794,2797,2799,2805,2807,2811,2814,2852,2861,2873,2907,2914,2960,2968,2974,3007,3023,3045,3047,3064,3071,3102,3108,3117,3119,3121,3125,3137,3146,3158,3167,3174,3181,3188,3191,3206,3217,3220,3234,3250,3289,3313,3317,3321,3324,3327,3346,3369,3374,3378,3383,3388,3397,3400,3408,3420,3423,3457,3540,3557,3562,3572,3573,3586,3595,3601,3612,3630,3647,3651,3663,3671,3687,3702,3725,3727,3759,3763,3765,3770,3774,3778,3783,3805,3827,3832,3836,3855,3863,3864,3879,3889,3910,3917,3922,3928,3929,3939,3940,3953,3961,3969,3975,3983,3987,3988,3989,4004,4027,4029,4037,4057,4067,4082,4088,4126,4135,4136,4159,4177,4183,4187,4189,4190,4191,4200,4203,4206,4228,4235,4248,4271,4324,4337,4339,4360,4363,4374,4379,4381,4390,4391,4402,4412,4434,4444,4452,4475,4480,4503,4506,4512,4517,4539,4540,4560,4565,4568,4594,4600,4605,4615,4622,4625,4626,4628,4641,4650,4664,4674,4687,4702,4748,4752,4762,4781,4809,4812,4814,4858,4860,4867,4869,4890,4896,4898,4902,4916,4918,4931,4965,4966,4969,5013,5029,5030,5034,5035,5044,5061,5068,5075,5089,5096,5111,5137,5163,5179,5191,5215,5216,5223,5226,5241,5247,5264,5281,5284,5301,5321,5322,5324,5329,5355,5371,5391,5393,5396,5407,5413,5419,5429,5439,5445,5448,5468,5484,5493,5516,5546,5547,5555,5569,5573,5576,5581,5589,5605,5617,5661,5667,5669,5673,5687,5688,5690,5700,5706,5718,5735,5756,5760,5765,5768,5801,5808,5832,5844,5851,5867,5873,5883,5889,5911,5912,5927,5953,5964,5966,5972,6014,6041,6044,6061,6084,6088,6089,6119,6130,6134,6137,6144,6164,6209,6225,6228,6258,6263,6273,6274,6284,6299,6310,6323,6325,6328,6349,6351,6370,6381,6392,6394,6398,6400,6401,6406,6409,6413,6421,6449,6455,6469,6471,6491,6500,6502,6513,6516,6521,6525,6555,6566,6572,6573,6590,6593,6612,6614,6619,6621,6625,6631,6637,6643,6657,6663,6672,6692,6699,6716,6733,6762,6798,6807,6830,6853,6854,6855,6860,6873,6885,6896,6918,6927,6945,6960,6970,6977,6987,7000,7013,7019,7022,7040,7061,7063,7071,7076,7078,7083,7093,7095,7102,7105,7111,7118,7138,7144,7153,7158,7180,7183,7186,7218,7228,7231,7240,7287,7294,7299,7308,7310,7322,7340,7350,7352,7357,7369,7372,7373,7388,7392,7400,7413,7428,7442,7453,7458,7464,7471,7477,7488,7504,7508,7513,7519,7520,7525,7527,7531,7546,7595,7598,7603,7607,7631,7650,7652,7663,7680,7682,7719,7724,7725,7726,7737,7747,7762,7765,7769,7781,7797,7806,7816,7821,7825,7826,7842,7846,7864,7876,7885,7903,7904,7922,7943,7976,7980,7998,8013,8019,8020,8031,8067,8083,8096,8103,8108,8134,8135,8143,8145,8150,8152,8165,8182,8194,8198,8213,8239,8247,8252,8331,8332,8335,8337,8355,8357,8369,8377,8379,8398,8399,8405,8406,8416,8421,8438,8462,8470,8472,8473,8476,8487,8488,8502,8507,8510,8512,8513,8517,8522,8529,8533,8534,8540,8542,8543,8550,8554,8581,8589,8594,8595,8596,8606,8607,8624,8629,8640,8658,8676,8690,8697,8698,8705,8751,8755,8761,8787,8818,8829,8831,8835,8837,8839,8841,8844,8879,8900,8910,8914,8931,8938,8943,8946,8967,8998,8999,9004,9006,9016,9024,9047,9058,9059,9066,9101,9110,9116,9164,9167,9168,9209,9221,9230,9231,9236,9271,9280,9287,9312,9319,9322,9329,9334,9339,9345,9352,9377,9380,9389,9392,9401,9428,9443,9456,9470,9471,9475,9489,9492,9513,9520,9550,9560,9563,9566,9573,9577,9586,9592,9595,9600,9617,9623,9641,9642,9644,9650,9677,9689,9690,9703,9759,9791,9794,9807,9825,9846,9876,9883,9904,9907,9913,9929,9953,9955,9967,9971,9981,9985,9997 };

	// 358
	//std::set<int> selectedPoints{ 3,9,10,29,60,87,101,121,137,140,150,152,156,172,180,199,207,215,230,238,262,290,297,298,305,313,315,316,325,333,344,350,357,361,371,382,401,403,404,417,436,462,482,494,500,503,511,532,547,562,567,575,580,592,609,642,645,651,662,695,710,722,739,751,761,773,792,817,825,830,832,842,851,855,872,901,913,926,927,931,936,947,961,964,968,975,995,1007,1009,1014,1025,1035,1054,1062,1078,1102,1124,1135,1136,1171,1176,1177,1191,1195,1227,1239,1244,1257,1271,1280,1283,1290,1294,1295,1305,1322,1336,1356,1363,1385,1386,1407,1425,1426,1470,1496,1515,1516,1522,1524,1526,1537,1543,1545,1562,1567,1574,1605,1616,1617,1618,1626,1644,1648,1682,1705,1709,1718,1729,1732,1737,1744,1754,1758,1760,1764,1767,1785,1790,1809,1824,1830,1841,1847,1891,1893,1900,1907,1908,1912,1933,1942,1947,1956,1975,1981,2025,2035,2037,2050,2056,2062,2073,2074,2081,2097,2105,2107,2158,2169,2182,2188,2205,2232,2246,2248,2269,2275,2281,2282,2286,2288,2294,2309,2315,2319,2323,2341,2387,2388,2418,2429,2443,2445,2462,2465,2472,2483,2506,2519,2522,2545,2558,2578,2595,2630,2667,2686,2695,2712,2722,2726,2742,2783,2787,2800,2807,2811,2839,2845,2861,2871,2880,2892,2901,2911,2941,2960,2974,2982,2988,2992,3019,3023,3026,3027,3028,3045,3047,3063,3064,3071,3107,3117,3119,3121,3134,3135,3153,3155,3161,3172,3174,3190,3191,3225,3228,3241,3246,3247,3251,3257,3285,3286,3300,3317,3318,3321,3331,3333,3340,3371,3378,3388,3390,3408,3442,3457,3482,3502,3519,3528,3538,3553,3554,3572,3585,3586,3595,3606,3612,3624,3628,3630,3647,3651,3674,3678,3687,3694,3696,3711,3720,3725,3734,3747,3750,3765,3774,3778,3802,3826,3839,3853,3855,3862,3863,3875,3879,3880,3885,3892,3908,3917,3942,3957,3962,3965,3968,3982,3994,4000,4006,4029,4036,4037,4064,4066,4078,4083,4107,4111,4121,4151,4178,4190,4203,4226,4248,4251,4267,4280,4285,4311,4342,4348,4363,4371,4378,4389,4390,4414,4424,4433,4448,4449,4465,4493,4508,4572,4573,4578,4609,4614,4622,4623,4626,4628,4638,4659,4660,4662,4671,4674,4709,4711,4714,4732,4752,4754,4762,4791,4810,4814,4844,4852,4869,4877,4878,4880,4893,4894,4898,4902,4912,4929,4931,4967,4981,5008,5014,5023,5026,5027,5029,5038,5049,5057,5060,5061,5069,5072,5096,5103,5111,5125,5128,5149,5151,5165,5191,5193,5195,5215,5259,5264,5266,5297,5309,5315,5321,5324,5329,5354,5355,5371,5377,5391,5396,5401,5407,5453,5475,5478,5480,5496,5525,5538,5541,5546,5565,5613,5614,5635,5654,5661,5667,5697,5723,5740,5761,5765,5766,5784,5801,5825,5832,5873,5927,6025,6041,6042,6048,6049,6050,6089,6096,6100,6122,6124,6126,6127,6147,6161,6164,6170,6174,6188,6195,6228,6231,6258,6284,6286,6323,6325,6327,6351,6361,6371,6376,6379,6381,6403,6409,6422,6427,6428,6447,6455,6461,6462,6464,6489,6511,6515,6518,6531,6534,6572,6578,6582,6591,6597,6615,6619,6621,6631,6700,6701,6707,6710,6749,6751,6800,6801,6806,6808,6824,6830,6833,6858,6865,6867,6882,6885,6896,6908,6918,6927,6933,6939,6941,6945,6947,6952,6992,7006,7008,7012,7017,7032,7042,7057,7064,7065,7070,7075,7076,7079,7089,7101,7102,7108,7128,7135,7157,7179,7182,7183,7206,7213,7228,7230,7231,7279,7298,7300,7314,7346,7365,7378,7381,7384,7386,7392,7400,7423,7442,7445,7511,7569,7586,7595,7603,7620,7633,7655,7662,7703,7704,7707,7721,7723,7725,7730,7742,7745,7762,7769,7781,7796,7806,7821,7826,7827,7839,7843,7863,7922,7958,7976,7984,7989,7998,8003,8005,8013,8073,8076,8081,8095,8096,8111,8134,8140,8143,8144,8172,8176,8190,8197,8199,8212,8213,8224,8232,8235,8247,8271,8325,8331,8334,8338,8348,8357,8370,8380,8386,8393,8400,8415,8427,8444,8460,8468,8470,8476,8487,8496,8504,8524,8529,8540,8542,8543,8554,8579,8606,8621,8639,8654,8656,8659,8668,8676,8682,8683,8687,8698,8741,8745,8753,8755,8778,8785,8787,8790,8791,8793,8806,8819,8831,8841,8866,8868,8869,8886,8891,8902,8908,8916,8920,8924,8931,8932,8943,8947,8948,8949,8956,8998,9003,9005,9009,9044,9065,9069,9071,9101,9121,9136,9142,9146,9164,9168,9175,9187,9210,9231,9236,9238,9259,9311,9312,9315,9326,9330,9334,9339,9355,9384,9389,9414,9450,9457,9461,9466,9488,9493,9514,9520,9538,9556,9563,9573,9576,9577,9587,9592,9595,9607,9608,9658,9661,9672,9681,9708,9734,9753,9763,9772,9876,9903,9907,9913,9915,9917,9927,9934,9939,9943,9952,9958,9960,9965,9971,9985,9997 };

	// 497
	std::set<int> selectedPoints{ 0,4,6,16,28,30,32,38,40,41,42,46,53,54,58,61,62,65,66,67,70,71,80,82,84,89,90,91,93,95,103,105,106,107,110,114,122,124,130,142,143,144,147,153,154,161,162,165,174,176,177,182,186,188,189,192,194,197,198,201,203,205,206,208,209,210,213,214,217,220,224,225,227,234,235,237,244,247,248,250,253,254,256,260,261,265,269,276,285,286,289,291,295,299,300,301,304,308,312,322,324,327,329,330,334,343,348,351,356,358,359,360,364,368,375,378,379,385,396,399,400,402,409,410,414,416,418,419,421,424,427,434,438,440,443,446,448,450,451,452,453,454,455,456,459,466,471,472,479,484,485,491,507,510,512,516,519,522,524,526,528,530,533,537,540,541,543,544,546,549,553,554,556,558,561,563,572,573,576,585,588,591,596,598,601,608,611,613,619,622,623,626,632,646,649,652,655,656,657,660,664,671,674,676,680,681,682,684,688,689,694,697,699,700,706,707,708,709,713,714,715,716,720,724,729,730,732,733,734,738,744,753,755,762,764,765,768,769,772,775,777,779,781,789,794,798,803,806,808,809,811,813,816,822,824,827,829,833,841,844,845,846,847,849,853,859,860,862,868,871,873,874,877,878,882,886,888,890,895,896,902,903,910,917,918,919,920,922,928,929,933,938,940,942,943,944,945,946,955,959,962,965,967,971,978,979,986,989,990,993,994,998,1001,1005,1010,1015,1016,1018,1023,1027,1031,1032,1039,1040,1042,1045,1046,1047,1057,1059,1060,1064,1065,1070,1073,1083,1087,1088,1092,1093,1094,1096,1101,1104,1105,1110,1111,1112,1114,1118,1121,1125,1131,1132,1134,1140,1142,1143,1146,1157,1158,1159,1160,1165,1168,1174,1175,1180,1182,1184,1186,1187,1190,1206,1207,1209,1216,1217,1220,1221,1224,1225,1229,1233,1234,1238,1240,1245,1248,1252,1254,1256,1259,1260,1261,1266,1268,1270,1272,1277,1279,1282,1285,1286,1288,1296,1303,1304,1311,1313,1314,1315,1316,1318,1324,1328,1331,1332,1335,1340,1343,1345,1352,1353,1362,1365,1372,1373,1376,1381,1387,1391,1392,1395,1398,1405,1408,1409,1410,1413,1419,1420,1421,1422,1438,1447,1452,1464,1467,1473,1474,1475,1479,1480,1483,1484,1488,1492,1493,1498,1500,1503,1505,1506,1507,1510,1511,1521,1525,1527,1528,1530,1531,1532,1534,1538,1547,1551,1552,1553,1556,1558,1565,1572,1577,1579,1581,1582,1584,1588,1590,1591,1593,1594,1597,1598,1601,1602,1603,1623,1625,1629,1659,1660,1665,1667,1669,1672,1674,1683,1687,1691,1696,1697,1699,1710,1715,1716,1721,1727,1733,1739,1740,1742,1749,1755,1759,1762,1770,1773,1780,1781,1782,1784,1786,1788,1793,1801,1811,1820,1825,1826,1831,1832,1836,1839,1840,1844,1853,1854,1864,1866,1870,1871,1872,1873,1874,1882,1884,1887,1890,1899,1902,1905,1913,1920,1922,1923,1925,1927,1929,1934,1939,1945,1959,1962,1964,1968,1969,1970,1979,1988,1990,1993,1994,1997,1999,2000,2016,2017,2019,2023,2031,2032,2036,2052,2057,2060,2064,2065,2067,2068,2075,2076,2088,2095,2096,2104,2108,2111,2112,2115,2116,2121,2123,2134,2135,2136,2140,2141,2147,2148,2150,2151,2155,2156,2161,2165,2166,2172,2176,2179,2180,2183,2186,2190,2191,2193,2194,2195,2197,2198,2203,2210,2221,2224,2227,2230,2235,2236,2238,2240,2245,2247,2249,2253,2255,2260,2263,2264,2271,2272,2273,2276,2278,2290,2291,2295,2298,2304,2313,2331,2332,2338,2345,2348,2350,2352,2355,2356,2359,2362,2365,2366,2367,2368,2371,2373,2375,2381,2382,2389,2392,2394,2401,2408,2409,2411,2420,2422,2423,2426,2428,2432,2434,2436,2437,2438,2440,2441,2442,2444,2446,2455,2458,2459,2469,2470,2476,2479,2480,2485,2486,2489,2494,2499,2501,2509,2514,2516,2518,2520,2521,2523,2524,2525,2526,2530,2532,2533,2535,2540,2541,2542,2544,2546,2547,2548,2553,2554,2561,2569,2570,2571,2577,2584,2587,2589,2591,2601,2609,2610,2613,2614,2621,2623,2625,2627,2628,2631,2634,2639,2644,2650,2651,2652,2653,2654,2655,2664,2669,2671,2676,2677,2681,2690,2693,2694,2699,2700,2702,2704,2706,2708,2709,2710,2715,2716,2717,2718,2720,2725,2731,2732,2733,2739,2740,2745,2746,2747,2759,2762,2772,2775,2776,2778,2779,2780,2784,2785,2792,2793,2795,2796,2802,2806,2808,2817,2818,2824,2829,2835,2840,2842,2843,2844,2847,2853,2856,2857,2862,2869,2874,2875,2877,2879,2881,2883,2891,2896,2897,2902,2905,2908,2913,2917,2918,2921,2922,2926,2927,2931,2934,2940,2944,2946,2947,2949,2951,2954,2957,2958,2961,2965,2973,2977,2981,2987,2989,2993,2997,2998,2999,3001,3011,3017,3018,3022,3025,3032,3035,3038,3042,3043,3048,3050,3052,3053,3055,3059,3060,3061,3066,3068,3070,3074,3076,3081,3083,3085,3087,3088,3089,3091,3095,3097,3103,3104,3110,3111,3116,3120,3123,3127,3138,3139,3140,3141,3142,3143,3148,3149,3150,3157,3162,3168,3179,3180,3184,3185,3196,3197,3200,3201,3202,3209,3210,3212,3214,3215,3218,3226,3230,3237,3244,3245,3252,3254,3255,3258,3261,3263,3271,3272,3274,3275,3278,3283,3288,3295,3297,3304,3306,3319,3320,3322,3329,3330,3332,3335,3336,3341,3343,3350,3352,3359,3361,3362,3364,3367,3382,3384,3396,3399,3403,3406,3410,3416,3424,3425,3427,3435,3436,3437,3439,3440,3441,3444,3447,3456,3458,3461,3469,3472,3473,3477,3479,3483,3488,3489,3490,3493,3494,3495,3496,3500,3501,3505,3507,3510,3511,3512,3514,3515,3523,3525,3526,3530,3539,3541,3546,3548,3551,3555,3561,3565,3567,3568,3582,3588,3594,3597,3598,3602,3605,3615,3619,3622,3625,3629,3631,3632,3633,3636,3637,3639,3640,3641,3643,3645,3646,3649,3652,3656,3657,3658,3662,3665,3673,3677,3679,3682,3683,3688,3689,3691,3698,3699,3700,3704,3705,3707,3710,3712,3714,3718,3719,3728,3730,3732,3735,3737,3738,3740,3741,3742,3743,3746,3748,3754,3761,3762,3767,3768,3773,3781,3784,3785,3786,3787,3794,3795,3800,3803,3806,3811,3813,3815,3816,3817,3818,3822,3823,3828,3829,3831,3833,3834,3838,3841,3844,3846,3848,3850,3856,3857,3858,3865,3866,3869,3870,3874,3883,3884,3891,3895,3897,3899,3903,3912,3913,3914,3915,3920,3923,3924,3927,3930,3934,3938,3941,3944,3946,3951,3956,3963,3964,3974,3977,3979,3980,3985,3986,3990,3991,3992,3993,3996,3999,4008,4015,4016,4018,4019,4030,4032,4034,4040,4041,4042,4047,4054,4055,4065,4071,4072,4073,4074,4075,4079,4084,4085,4086,4091,4094,4096,4097,4100,4103,4104,4105,4106,4109,4110,4112,4114,4119,4123,4125,4127,4129,4130,4131,4132,4139,4140,4141,4147,4149,4150,4153,4155,4160,4161,4165,4193,4194,4195,4205,4208,4209,4218,4221,4224,4225,4227,4229,4236,4237,4242,4243,4244,4245,4246,4252,4265,4268,4269,4272,4275,4277,4278,4279,4295,4296,4297,4298,4299,4300,4302,4303,4304,4306,4307,4308,4310,4318,4320,4323,4326,4330,4334,4336,4340,4341,4343,4346,4347,4350,4351,4352,4355,4359,4361,4364,4366,4368,4370,4382,4392,4393,4397,4399,4404,4413,4417,4419,4430,4431,4432,4435,4439,4443,4447,4450,4451,4453,4454,4457,4460,4461,4462,4464,4467,4472,4473,4476,4477,4479,4481,4484,4486,4488,4497,4500,4505,4509,4511,4523,4524,4526,4528,4534,4535,4541,4543,4546,4548,4550,4552,4553,4554,4556,4561,4563,4567,4571,4574,4581,4582,4585,4590,4596,4597,4599,4606,4608,4611,4616,4619,4629,4630,4632,4633,4636,4637,4640,4642,4643,4652,4655,4658,4668,4669,4670,4673,4676,4680,4681,4683,4685,4686,4689,4690,4691,4695,4696,4697,4700,4701,4705,4708,4710,4713,4715,4716,4718,4720,4721,4722,4726,4727,4730,4731,4735,4736,4741,4743,4744,4745,4746,4751,4760,4765,4772,4776,4778,4780,4782,4783,4785,4789,4792,4793,4800,4801,4803,4805,4815,4819,4820,4826,4827,4830,4832,4838,4841,4845,4846,4847,4849,4857,4864,4865,4868,4870,4883,4888,4891,4895,4899,4900,4901,4903,4906,4907,4909,4910,4913,4914,4926,4930,4932,4942,4945,4947,4955,4956,4963,4968,4970,4972,4976,4977,4978,4980,4983,4984,4985,4988,4989,4990,4991,4992,4993,4997,5000,5001,5004,5005,5006,5007,5016,5020,5024,5025,5028,5032,5033,5036,5037,5039,5041,5043,5053,5054,5059,5063,5064,5065,5066,5067,5073,5081,5083,5087,5088,5090,5093,5094,5097,5101,5104,5106,5112,5113,5116,5119,5131,5136,5139,5140,5141,5142,5144,5150,5153,5156,5159,5162,5164,5167,5169,5170,5172,5173,5176,5177,5178,5181,5186,5187,5188,5197,5198,5200,5201,5203,5205,5206,5207,5209,5212,5219,5221,5222,5229,5230,5232,5234,5235,5239,5245,5248,5250,5251,5256,5257,5261,5262,5263,5268,5271,5274,5278,5279,5282,5292,5295,5298,5300,5302,5303,5305,5306,5307,5316,5320,5327,5328,5332,5333,5335,5336,5340,5341,5342,5344,5351,5352,5353,5359,5360,5361,5362,5363,5369,5381,5384,5385,5387,5392,5398,5402,5403,5406,5411,5416,5418,5420,5421,5426,5430,5431,5432,5434,5435,5438,5441,5446,5456,5459,5461,5463,5470,5472,5474,5476,5479,5481,5483,5490,5500,5506,5508,5510,5511,5518,5519,5520,5522,5523,5528,5533,5536,5539,5542,5544,5545,5549,5554,5556,5559,5560,5571,5578,5583,5586,5587,5591,5599,5608,5610,5615,5620,5622,5624,5626,5627,5630,5631,5632,5633,5634,5640,5644,5646,5650,5651,5652,5655,5656,5659,5664,5668,5675,5676,5682,5683,5685,5689,5691,5695,5705,5707,5711,5713,5717,5724,5726,5733,5734,5736,5737,5738,5741,5743,5746,5751,5752,5762,5769,5770,5771,5775,5776,5778,5781,5782,5787,5788,5794,5795,5798,5799,5803,5811,5817,5822,5835,5836,5839,5841,5845,5847,5849,5855,5858,5859,5861,5864,5865,5870,5874,5875,5879,5881,5884,5888,5895,5902,5903,5904,5906,5907,5908,5914,5915,5917,5918,5922,5925,5928,5930,5931,5933,5934,5940,5943,5946,5947,5949,5954,5962,5963,5976,5977,5978,5983,5988,5990,6000,6001,6011,6012,6013,6018,6021,6026,6027,6030,6037,6038,6040,6045,6046,6047,6054,6060,6065,6067,6069,6071,6072,6080,6083,6086,6090,6092,6095,6099,6102,6105,6107,6110,6111,6115,6118,6125,6128,6129,6131,6135,6139,6140,6141,6142,6143,6150,6152,6153,6159,6162,6163,6167,6169,6171,6172,6175,6176,6179,6181,6182,6184,6187,6189,6191,6192,6193,6194,6196,6198,6200,6201,6203,6207,6211,6212,6215,6216,6221,6224,6226,6229,6233,6236,6238,6240,6243,6245,6254,6257,6262,6265,6267,6268,6271,6275,6282,6288,6290,6303,6305,6308,6309,6311,6312,6321,6322,6332,6336,6337,6339,6341,6343,6344,6346,6348,6350,6355,6358,6365,6368,6369,6372,6380,6389,6390,6399,6414,6416,6423,6424,6425,6429,6431,6433,6435,6439,6440,6441,6445,6453,6458,6459,6467,6470,6472,6477,6478,6482,6483,6490,6493,6497,6505,6506,6509,6510,6512,6519,6522,6528,6546,6547,6548,6549,6550,6553,6556,6557,6560,6562,6569,6571,6583,6595,6607,6617,6618,6620,6622,6633,6634,6635,6638,6640,6645,6648,6649,6652,6653,6654,6655,6656,6658,6660,6661,6665,6666,6669,6675,6676,6677,6679,6680,6682,6688,6693,6694,6696,6702,6704,6706,6708,6711,6725,6731,6732,6736,6741,6743,6744,6748,6752,6756,6758,6760,6761,6763,6768,6770,6771,6773,6781,6783,6784,6785,6790,6795,6796,6797,6802,6805,6814,6816,6818,6823,6831,6834,6837,6841,6843,6848,6850,6859,6863,6866,6876,6877,6889,6891,6894,6899,6900,6901,6906,6909,6913,6914,6915,6919,6920,6922,6923,6924,6925,6926,6934,6935,6946,6949,6953,6961,6962,6964,6965,6966,6968,6971,6972,6979,6980,6982,6983,6984,6989,6991,6997,6998,7003,7009,7010,7014,7020,7023,7025,7030,7031,7033,7034,7035,7037,7039,7043,7045,7047,7049,7050,7051,7055,7056,7060,7067,7073,7074,7081,7084,7096,7099,7107,7109,7115,7116,7119,7120,7124,7125,7129,7131,7132,7134,7137,7142,7146,7147,7151,7156,7160,7162,7164,7166,7168,7173,7176,7177,7178,7181,7184,7185,7188,7191,7193,7194,7195,7197,7198,7200,7202,7203,7205,7210,7214,7215,7217,7219,7224,7234,7235,7236,7237,7241,7244,7245,7246,7249,7250,7252,7254,7255,7258,7265,7266,7267,7268,7274,7275,7276,7277,7278,7282,7283,7290,7291,7293,7296,7304,7312,7313,7315,7316,7320,7323,7327,7330,7335,7337,7339,7341,7342,7343,7347,7351,7354,7358,7359,7360,7361,7363,7364,7370,7371,7376,7380,7387,7389,7393,7395,7398,7405,7406,7414,7415,7417,7426,7430,7436,7438,7439,7446,7447,7448,7452,7459,7461,7462,7465,7469,7473,7481,7495,7505,7507,7518,7521,7522,7532,7533,7534,7535,7538,7543,7545,7548,7553,7556,7557,7559,7563,7564,7567,7573,7574,7577,7579,7583,7585,7599,7601,7602,7605,7610,7612,7615,7619,7622,7627,7628,7630,7635,7640,7642,7643,7644,7649,7656,7659,7665,7667,7675,7676,7677,7679,7683,7688,7695,7696,7699,7700,7706,7708,7709,7711,7715,7716,7718,7722,7728,7732,7735,7738,7740,7741,7743,7744,7748,7750,7760,7761,7766,7772,7773,7775,7780,7783,7784,7786,7788,7789,7791,7794,7798,7803,7805,7807,7810,7812,7813,7824,7835,7837,7838,7841,7851,7852,7855,7857,7858,7862,7867,7869,7872,7877,7881,7884,7887,7891,7894,7896,7897,7898,7902,7905,7906,7909,7911,7912,7913,7914,7915,7917,7918,7930,7933,7935,7938,7942,7947,7948,7949,7950,7952,7954,7957,7961,7962,7967,7971,7975,7985,7986,7987,7988,7990,7992,7994,8001,8004,8009,8010,8014,8015,8017,8018,8022,8023,8032,8033,8042,8045,8049,8053,8055,8065,8066,8072,8080,8084,8091,8093,8102,8104,8112,8113,8116,8119,8120,8123,8125,8129,8136,8141,8149,8151,8153,8158,8162,8164,8167,8175,8177,8178,8186,8188,8192,8195,8203,8207,8208,8209,8211,8214,8217,8218,8220,8222,8228,8230,8231,8233,8240,8242,8243,8250,8251,8254,8255,8258,8260,8262,8264,8273,8275,8276,8278,8287,8290,8292,8294,8298,8302,8303,8304,8305,8306,8307,8310,8311,8313,8315,8323,8324,8326,8327,8328,8330,8340,8344,8345,8346,8347,8350,8353,8354,8356,8362,8366,8367,8368,8372,8373,8374,8381,8383,8385,8387,8388,8389,8396,8402,8407,8409,8410,8413,8420,8422,8424,8437,8440,8450,8455,8458,8459,8461,8463,8466,8467,8483,8490,8491,8501,8506,8514,8515,8516,8518,8520,8523,8526,8532,8537,8538,8541,8560,8562,8564,8567,8569,8573,8582,8583,8585,8586,8588,8591,8592,8597,8605,8609,8610,8614,8616,8617,8620,8623,8632,8634,8635,8637,8638,8643,8648,8651,8655,8661,8662,8663,8669,8671,8672,8673,8680,8681,8688,8691,8693,8695,8701,8703,8704,8708,8714,8717,8718,8719,8720,8721,8722,8724,8725,8733,8738,8744,8746,8748,8759,8762,8763,8766,8767,8775,8776,8780,8781,8782,8789,8796,8797,8800,8807,8810,8816,8817,8823,8824,8825,8826,8828,8833,8834,8846,8847,8849,8850,8852,8863,8871,8872,8876,8878,8880,8882,8883,8885,8887,8888,8889,8890,8892,8893,8894,8898,8905,8906,8911,8915,8919,8923,8929,8937,8944,8954,8959,8963,8968,8970,8973,8974,8979,8980,8981,8982,8986,8988,8992,8993,8995,8997,9000,9001,9002,9008,9013,9017,9020,9023,9025,9026,9027,9028,9029,9032,9034,9035,9038,9048,9050,9051,9052,9061,9062,9072,9074,9075,9078,9080,9086,9087,9089,9097,9098,9100,9103,9105,9111,9112,9114,9115,9119,9120,9122,9123,9124,9127,9129,9133,9141,9143,9147,9151,9153,9154,9156,9157,9160,9165,9170,9173,9174,9178,9182,9184,9188,9189,9190,9191,9192,9194,9195,9198,9199,9204,9208,9212,9213,9215,9217,9218,9219,9222,9223,9233,9235,9237,9239,9240,9241,9243,9247,9251,9254,9257,9260,9264,9272,9275,9279,9281,9282,9284,9289,9290,9292,9295,9298,9299,9300,9302,9303,9305,9306,9310,9314,9318,9321,9323,9328,9332,9337,9341,9342,9344,9350,9353,9356,9357,9360,9361,9362,9364,9365,9366,9367,9368,9371,9372,9375,9379,9386,9387,9390,9391,9395,9397,9408,9410,9412,9413,9417,9424,9427,9429,9430,9431,9433,9435,9438,9439,9446,9451,9454,9462,9463,9465,9474,9478,9483,9490,9495,9496,9497,9501,9504,9506,9508,9509,9517,9527,9535,9540,9542,9543,9552,9553,9557,9562,9564,9565,9570,9572,9574,9578,9579,9580,9582,9584,9588,9589,9590,9591,9593,9598,9599,9605,9622,9624,9625,9636,9639,9640,9647,9649,9651,9655,9660,9671,9674,9676,9678,9679,9683,9684,9685,9691,9692,9699,9705,9707,9709,9711,9715,9716,9718,9720,9721,9724,9725,9731,9732,9742,9743,9746,9749,9751,9755,9756,9766,9777,9778,9779,9782,9784,9788,9796,9800,9801,9803,9804,9808,9812,9813,9814,9815,9817,9819,9823,9826,9828,9830,9831,9833,9835,9840,9844,9857,9860,9861,9873,9875,9878,9880,9881,9886,9887,9888,9890,9895,9899,9909,9910,9912,9914,9916,9925,9928,9930,9931,9933,9935,9936,9937,9940,9942,9944,9945,9948,9949,9951,9954,9957,9959,9964,9974,9975,9976,9978,9980,9987,9990,9993,9995,9996 };

	// Twos
	//std::set<int> selectedPoints{ 15,27,33,35,72,74,77,78,100,118,123,126,148,212,228,229,233,249,266,274,278,282,294,302,303,317,323,326,328,336,337,346,363,381,392,394,429,431,442,445,449,458,463,464,465,468,473,486,488,492,499,505,509,515,517,520,527,557,566,574,578,586,600,603,604,615,621,633,636,644,647,663,670,725,750,754,758,763,784,790,821,835,836,837,852,854,864,865,885,889,894,911,937,939,952,957,966,985,987,1013,1036,1050,1055,1066,1075,1076,1080,1084,1097,1106,1117,1130,1151,1156,1166,1178,1179,1194,1203,1204,1205,1210,1226,1228,1241,1243,1269,1298,1300,1306,1355,1374,1383,1394,1397,1417,1440,1444,1449,1453,1459,1463,1486,1489,1499,1513,1514,1536,1539,1549,1555,1596,1600,1604,1613,1634,1637,1643,1662,1685,1701,1714,1719,1724,1725,1734,1738,1752,1772,1776,1777,1789,1799,1804,1813,1817,1848,1852,1863,1875,1937,1943,1952,1954,1958,1978,1985,2001,2012,2013,2026,2027,2045,2055,2071,2099,2127,2131,2132,2139,2163,2170,2171,2185,2196,2207,2226,2229,2234,2254,2257,2261,2267,2306,2317,2325,2327,2344,2374,2377,2379,2383,2384,2386,2424,2431,2448,2451,2452,2454,2456,2460,2508,2536,2555,2573,2574,2575,2580,2581,2594,2603,2604,2608,2640,2647,2673,2680,2683,2689,2711,2736,2751,2757,2790,2813,2821,2823,2836,2854,2888,2924,2925,2932,2969,2970,2971,2980,2985,3008,3036,3039,3054,3073,3080,3098,3101,3128,3156,3160,3173,3176,3177,3183,3186,3189,3203,3233,3235,3238,3259,3260,3264,3265,3268,3270,3272,3308,3309,3315,3328,3338,3344,3354,3357,3358,3389,3393,3394,3395,3405,3409,3413,3432,3433,3434,3449,3450,3460,3467,3471,3474,3491,3498,3509,3518,3531,3532,3547,3550,3552,3569,3579,3587,3591,3599,3616,3626,3634,3650,3666,3693,3695,3715,3723,3726,3729,3745,3757,3769,3776,3789,3791,3808,3814,3825,3840,3868,3871,3890,3900,3916,3931,3937,3943,3971,3978,4002,4022,4026,4028,4043,4045,4051,4058,4063,4070,4113,4116,4118,4120,4134,4188,4210,4217,4219,4230,4231,4239,4256,4259,4261,4262,4276,4284,4286,4292,4321,4325,4356,4365,4369,4372,4385,4386,4401,4418,4425,4437,4445,4455,4463,4470,4471,4527,4542,4544,4559,4566,4570,4576,4580,4624,4631,4646,4682,4699,4723,4729,4733,4738,4742,4749,4768,4794,4795,4802,4806,4825,4829,4833,4836,4854,4873,4915,4920,4925,4935,4936,4937,4941,4953,4958,4960,4971,4982,4998,5003,5010,5012,5017,5031,5046,5056,5070,5078,5080,5092,5110,5120,5123,5132,5145,5182,5184,5185,5189,5220,5224,5238,5258,5269,5277,5286,5296,5299,5304,5305,5308,5350,5373,5388,5397,5399,5400,5410,5443,5444,5450,5471,5503,5515,5548,5552,5563,5568,5570,5572,5602,5607,5625,5639,5647,5649,5670,5677,5696,5701,5703,5721,5722,5731,5742,5744,5747,5748,5780,5785,5791,5807,5813,5816,5818,5826,5852,5871,5878,5891,5892,5920,5929,5932,5943,5955,5970,5975,5987,5994,6002,6003,6004,6006,6010,6028,6039,6078,6106,6113,6148,6155,6157,6185,6205,6223,6239,6249,6270,6279,6281,6291,6292,6295,6297,6300,6319,6324,6331,6334,6338,6345,6353,6357,6367,6383,6396,6402,6404,6432,6442,6474,6480,6481,6487,6488,6492,6498,6503,6504,6508,6530,6538,6540,6544,6558,6567,6585,6596,6610,6616,6626,6628,6662,6684,6698,6713,6714,6727,6730,6742,6750,6772,6789,6809,6821,6825,6832,6835,6847,6861,6862,6864,6868,6874,6893,6895,6929,6932,6956,6958,6969,6973,6974,6975,6976,6993,7036,7038,7094,7103,7136,7140,7141,7161,7175,7204,7227,7239,7261,7289,7328,7332,7338,7349,7382,7422,7427,7450,7451,7454,7460,7472,7480,7485,7491,7500,7528,7537,7541,7552,7572,7587,7592,7609,7634,7638,7641,7648,7649,7660,7684,7689,7702,7712,7734,7757,7771,7787,7790,7808,7822,7831,7847,7850,7861,7870,7874,7878,7883,7895,7900,7901,7934,7970,7974,7977,7981,7983,7993,8007,8012,8028,8034,8047,8061,8085,8086,8110,8127,8137,8154,8157,8161,8170,8180,8185,8215,8223,8227,8248,8265,8336,8339,8349,8360,8371,8375,8378,8435,8448,8449,8451,8456,8486,8489,8500,8509,8528,8544,8566,8575,8576,8578,8580,8599,8600,8602,8604,8619,8633,8652,8679,8700,8706,8712,8750,8754,8757,8764,8772,8809,8814,8827,8838,8857,8865,8873,8874,8896,8904,8909,8913,8917,8927,8928,8933,8940,8942,8957,8964,8975,9007,9010,9012,9015,9021,9039,9053,9054,9067,9077,9094,9102,9109,9130,9135,9144,9148,9177,9197,9201,9205,9206,9207,9214,9229,9246,9249,9266,9296,9304,9307,9325,9346,9351,9369,9382,9385,9396,9403,9405,9426,9440,9444,9449,9468,9479,9507,9515,9516,9522,9523,9529,9530,9548,9551,9561,9575,9581,9602,9604,9611,9615,9616,9628,9630,9632,9633,9653,9657,9662,9666,9682,9693,9698,9701,9706,9727,9729,9738,9739,9740,9741,9747,9793,9816,9841,9843,9851,9855,9867,9870,9897,9898,9900,9901,9906,9918,9924,9966,9998,9999 };

	// MNIST 1k
	//std::vector<int> selectedPoints{ 4,7,8,23,34,35,58,60,65,84,93,106,126,129,148,152,160,163,183,193,210,213,230,232,234,240,244,262,269,272,287,289,290,299,300,335,338,346,348,360,361,369,375,376,381,385,393,398,401,402,404,407,408,421,426,447,448,468,483,491,499,525,526,533,544,559,561,572,594,598,602,611,635,636,639,644,686,697,716,735,749,750,761,762,766,771,772,776,804,808,827,829,845,867,871,872,882,917,922,941,970,975,981,985,996 };
	//std::set<int> selectedPoints{ 4 };

	// Save selected points
	hdi::utils::secureLogValue(&log, "Selected points", selectedPoints.size());
	std::vector<int> selectedIds(selectedPoints.begin(), selectedPoints.end());
	save_as_csv(selectedIds, selectedPoints.size(), 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/selection.csv");

	// Set perplexities
	std::vector<float> perplexities(N, 40);

	for (int selectedIndex : selectedPoints) {
		perplexities[selectedIndex] = 200;
	}

	wt->prob_gen_param._perplexities = perplexities;
	wt->initialise_tsne(L"C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/CSV-to-BIN/datasets-bin/mnist-10k.bin", N, input_dims);

	// STEP 2: Augment selected points

	std::set<int> selectedPointWithNeighbours(selectedPoints);

	// 2.1 Using nearest neighbours
	//int neighbours = 5;
	//std::vector<weighted_tsne::scalar_type> distances_squared;
	//std::vector<int> indices;

	//hdi::dr::HDJointProbabilityGenerator<weighted_tsne::scalar_type>::Parameters temp_prob_gen_param;
	//temp_prob_gen_param._perplexities = neighbours - 1; // (it does +1 in HDJointProbabilityGenerator for some reason)
	//temp_prob_gen_param._perplexity_multiplier = 1;

	//wt->prob_gen.computeHighDimensionalDistances(wt->data.data(), input_dims, N, distances_squared, indices, temp_prob_gen_param);

	//for (int i : indices) {
	//	selectedPointWithNeighbours.insert(i);
	//}

	// 2.2 Using the p-values
	//float neighbours_thres = 0.02f;
	//hdi::utils::secureLogValue(&log, "Neighbourhood threshold", neighbours_thres);

	//weighted_tsne::sparse_scalar_matrix P = wt->tSNE.getDistributionP(); //std::vector<hdi::data::MapMemEff<uint32_t, float>>
	//
	//for (int selectedIndex : selectedPoints) {
	//	for (auto elem : P[selectedIndex]) {
	//		if (elem.second > neighbours_thres) {
	//			selectedPointWithNeighbours.insert(elem.first);
	//		}
	//	}
	//}


	// 2.3 Merge neighbors with selected points
	//for (int selectedNeighbour : selectedPointWithNeighbours) {
	//	selectedPoints.insert(selectedNeighbour);
	//}

	hdi::utils::secureLogValue(&log, "With extra neighbours included", selectedPointWithNeighbours.size());
	std::vector<int> selectedNeighbourIds(selectedPointWithNeighbours.begin(), selectedPointWithNeighbours.end());
	save_as_csv(selectedNeighbourIds, selectedPointWithNeighbours.size(), 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/selection-neighbours.csv");

	// STEP 3: Set the weights
	float j = 67343324234;
	float selectedWeight = 1.0f;
	float unselectedWeight = 1.0f;

	float repForceWeight = 4.0f;
	float attrForceWeight = 2.0f;

	//hdi::utils::secureLogValue(&log, "Selected weight", selectedWeight);
	//hdi::utils::secureLogValue(&log, "Unselected weight", unselectedWeight);
	hdi::utils::secureLogValue(&log, "Attr force weight", attrForceWeight);
	hdi::utils::secureLogValue(&log, "Rep force weight", repForceWeight);

	// 2.1 Set weights using set values
	std::vector<float> one_weights(N, 1);
	std::vector<float> attr_weights(N, 1);
	std::vector<float> rep_weights(N, 1);

	// Compute weight falloff in HD space
	int falloff_k = 400;
	hdi::utils::secureLogValue(&log, "k", falloff_k);

	std::vector<float> weights_falloff_hd(N, 0);
	wt->compute_weight_falloff(wt->data, N, input_dims, selectedPointWithNeighbours, falloff_k, weights_falloff_hd);

	// High weights with falloff
	std::vector<float> selected_high_falloff(N, 1);
	std::vector<float> selected_high_falloff_inv(N, 1);

	for (int i = 0; i < N; i++) {
		selected_high_falloff[i] = weights_falloff_hd[i];
	}

	//std::vector<float> selected_point_high(N, 0);

	//for (int selectedIndex : selectedPoints) {
	//	selected_point_high[selectedIndex] = 2;
	//}

	/*for (int i = 0; i < N; i++) {
		selected_high_falloff_inv[i] = 1-weights_falloff_hd[i];
	}*/
	//std::vector<float> high_weights(N, 2);

	// High weights for selected points
	/*std::vector<float> selected_high_falloff_rep_boost(selected_high_falloff);

	for (int i = 0; i < N; i++) {
		selected_high_falloff[i] *= 2;
	}
*/
	//for (int index : selectedPointWithNeighbours) {
	//	selected_high[index] = 2 * selected_high_falloff[index];
	//}
	//hdi::utils::secureLogValue(&log, "Selected high", selected_high[0]);

	//for (int i = 0; i < N; i++) {
	//	rep_weights[i] = weights_falloff_hd[i] * repForceWeight + 1;
	//	attr_weights[i] = weights_falloff_hd[i] * attrForceWeight + 1;
	//}

	// Set selected point weight
	//for (int selectedIndex : selectedPoints) {
	//	rep_weights[selectedIndex] = 10.0f;
	//}

	//for (int selectedIndex : selectedPointWithNeighbours) {
	//	rep_weights[selectedIndex] = repForceWeight;
	//}

	//for (int selectedIndex : selectedPointWithNeighbours) {
	//	attr_weights[selectedIndex] = attrForceWeight;
	//}


	//int w = 23423232;
	//int k = 1500;
	//std::vector<int> nn;
	//wt->compute_neighbours(wt->data, N, input_dims, k, nn);
	//
	//std::vector<int> min_nn(N, INT_MAX);

	//// For each point, save the k-nn distance to the closest selected point. Save the distance to the closest selected point.
	//for (int selectedIndex : selectedPointWithNeighbours) {
	//	for (int j = 0; j <= k; j++) {
	//		int idx = selectedIndex * (k + 1); // Index of the first nearest neighbour of selectedIndex in nn (which is selectedIndex itself)
	//		int nn_idx = nn[idx + j]; // Index of the j-th nearest neighbour of selectedIndex in min_nn
	//		min_nn[nn_idx] = min(min_nn[nn_idx], j);
	//	}
	//}

	// Set the selected points to be zero
	//for (int selectedIndex : selectedPointWithNeighbours) {
	//	min_nn[selectedIndex] = 0;
	//}

	// Calculate weights from min_nn
	//std::vector<float> weights_falloff_hd(N, 0);

	//for (int i = 0; i < N; i++) {
	//	if (min_nn[i] != INT_MAX) {
	//		weights_falloff_hd[i] = (k - min_nn[i]) / (float) k;
	//	}
	//}

	//int w = 12121232;
	//weighted_tsne::sparse_scalar_matrix P = wt->tSNE.getDistributionP(); //std::vector<hdi::data::MapMemEff<uint32_t, float>>

	//for (int selectedIndex : selectedPoints) {
	//	attr_weights[selectedIndex] += 1;
	//	rep_weights[selectedIndex] += 1;

	//	for (auto elem : P[selectedIndex]) { // elem.first is index, elem.second is p-value
	//		attr_weights[elem.first] += 1;
	//		rep_weights[elem.first] += 10;
	//	}
	//}

	// Set selected gradient weight
	//for (int selectedIndex : selectedPointWithNeighbours) {
	//	attr_weights[selectedIndex] = selectedWeight;
	//}

	// 2.2 Set weights based on P

	//for (int selectedIndex : selectedPointWithNeighbours) {
	//	//float weight_sum = 0;

	//	for (auto elem : P[selectedIndex]) { // elem.first is index, elem.second is p-value
	//		//weight_sum += elem.second;
	//		attr_weights[elem.first] += elem.second;
	//	}

	//	//attr_weights[selectedIndex] += 1;
	//}

	//// Make gradient weights sum up to a constant
	//float sum = 0;
	//for (int i = 0; i < attr_weights.size(); i++) sum += attr_weights[i];
	//for (int i = 0; i < attr_weights.size(); i++) attr_weights[i] = N * attr_weights[i] / sum;

	//wt->tSNE.setWeights(pointWeights, attr_weights);
	int wer = 3223423;
	wt->tSNE.setWeights(selected_high_falloff, selected_high_falloff, one_weights, one_weights); // attr avg, rep avg, attr all, rep all
	save_as_csv(selected_high_falloff, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/weights.csv");
	//save_as_csv(rep_weights, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/rep-weights.csv");
	//save_as_csv(weights_falloff_hd, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/weights-falloff-hd.csv");

	float iteration_time = 0;

	// Run the actual algorithm
	{
		hdi::utils::ScopedTimer<float, hdi::utils::Milliseconds> timer(iteration_time);

		for (int i = 0; i < iterations; i++) {
			if (i > 0 && i % 100 == 0)
				hdi::utils::secureLogValue(&log, "Iteration", i);

			wt->do_iteration();
		}


		//for (int i = 0; i < iterations; i++) {
		//	if (i > 0 && i % 100 == 0) {
		//		hdi::utils::secureLogValue(&log, "Iteration", i);

		//		int falloff_k = 200;
		//		hdi::utils::secureLogValue(&log, "k", falloff_k);

		//		std::vector<float> weights_falloff_ld(N, 0);
		//		wt->compute_weight_falloff(wt->embedding.getContainer(), N, output_dims, selectedPointWithNeighbours, falloff_k, weights_falloff_ld);

		//		// High weights with falloff
		//		std::vector<float> selected_high_falloff_ld(N, 1);

		//		for (int i = 0; i < N; i++) {
		//			//selected_high_falloff[i] = 40 * (weights_falloff_hd[i] + weights_falloff_ld[i]);
		//			selected_high_falloff[i] = 80 * std::max(weights_falloff_hd[i], weights_falloff_ld[i]);
		//		}
		//		save_as_csv(selected_high_falloff, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/weights-ld.csv");

		//		wt->tSNE.setWeights(selected_high_falloff, selected_high_falloff, one_weights, one_weights); // attr avg, rep avg, attr all, rep all

		//	}

		//	wt->do_iteration();
		//}


		//std::vector<float> weights_falloff_ld(N, 0);
		//wt->compute_weight_falloff(wt->embedding.getContainer(), N, output_dims, selectedPoints, falloff_k, weights_falloff_ld);
		//save_as_csv(weights_falloff_ld, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/weights-falloff-ld.csv");

		//for (int i = 0; i < N; i++) {
		//	rep_weights[i] = max(weights_falloff_hd[i], weights_falloff_ld[i]) * repForceWeight;
		//	attr_weights[i] = max(weights_falloff_hd[i], weights_falloff_ld[i]) * attrForceWeight;
		//}

		//wt->tSNE.setWeights(pointWeights, attr_weights, rep_weights);
		//save_as_csv(attr_weights, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/attr-weights-end.csv");
		//save_as_csv(rep_weights, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/rep-weights-end.csv");

		//for (int i = 0; i < iterations/2; i++) {
		//	if (i > 0 && i % 100 == 0)
		//		hdi::utils::secureLogValue(&log, "Iteration", i);

		//	wt->do_iteration();
		//}

		//// Add low dimensional neighbourhood as high weight points
		//neighbours_thres = 0.4;
		//hdi::utils::secureLogValue(&log, "New neighbourhood thres", neighbours_thres);

		//wt->tSNE.computeLowDimensionalDistribution();
		//std::vector<float> Q = wt->tSNE.getDistributionQ(); //std::vector<hdi::data::MapMemEff<uint32_t, float>>

		//for (int selectedIndex : selectedPoints) {
		//	int idx = N * selectedIndex;
		//	for (int j = 0; j < N; j++) {
		//		float q_ij = Q[idx + j];

		//		if (q_ij > neighbours_thres) {
		//			selectedPointWithNeighbours.insert(j);
		//		}
		//	}
		//}

		//hdi::utils::secureLogValue(&log, "Selected points with neighbours are now", selectedPointWithNeighbours.size());

		//attr_weights.resize(N, unselectedWeight);

		//// Set selected gradient weight
		//for (int selectedIndex : selectedPointWithNeighbours) {
		//	attr_weights[selectedIndex] = selectedWeight;
		//}

		//// Make gradient weights sum up to a constant
		//float sum = 0;
		//for (int i = 0; i < attr_weights.size(); i++) sum += attr_weights[i];
		//for (int i = 0; i < attr_weights.size(); i++) attr_weights[i] = N * attr_weights[i] / sum;

		//wt->tSNE.setWeights(pointWeights, attr_weights);

		//save_as_csv(attr_weights, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/gradient-weights-end.csv");
		//std::vector<int> selectedNeighbourIds(selectedPointWithNeighbours.begin(), selectedPointWithNeighbours.end());
		//save_as_csv(selectedNeighbourIds, selectedPointWithNeighbours.size(), 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/selection-neighbours-end.csv");

		//for (int i = 0; i < iterations / 2; i++) {
		//	if (i > 0 && i % 100 == 0)
		//		hdi::utils::secureLogValue(&log, "Iteration", i);

		//	wt->do_iteration();
		//}
	}

	// Save embedding as CSV
	std::vector<weighted_tsne::scalar_type> res = wt->embedding.getContainer();
	save_as_csv(res, N, output_dims, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/embedding.csv");

	hdi::utils::secureLogValue(&log, "Total iteration time (s): ", iteration_time / 1000.0f);
	hdi::utils::secureLogValue(&log, "Average iteration time (ms): ", iteration_time / (float)iterations);

	{
		// Calculate set error for each data point
		std::vector<int> k_all = { 200 };
		int k_max = *std::max_element(k_all.begin(), k_all.end());

		std::vector<int> highDimNeighbours;
		std::vector<int> lowDimNeighbours;

		// highDimNeighbours, lowDimNeighbours, includes the point itself as its nearest neighbour
		wt->compute_neighbours(wt->data, N, input_dims, k_max, highDimNeighbours);
		wt->compute_neighbours(wt->embedding.getContainer(), N, output_dims, k_max, lowDimNeighbours);

		save_as_csv(highDimNeighbours, N, k_max + 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/neighbours-hd.csv");
		save_as_csv(lowDimNeighbours, N, k_max + 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/neighbours-ld.csv");

		std::vector<float> set_errors(N*k_all.size(), 0);
		std::vector<float> per_errors(N*k_all.size(), 0);
		std::vector<float> seq_errors(N*k_all.size(), 0);

		// Calculate errors at all resolutions
		for (int i = 0; i < k_all.size(); i++) {
			//std::vector<float> set_err(N, 0);
			std::vector<float> per_err(N, 0);
			//wt->calculate_set_error(lowDimNeighbours, highDimNeighbours, set_err, N, N + 1, k_all[i]);
			wt->calculate_percentage_error(lowDimNeighbours, highDimNeighbours, per_err, N, k_max + 1, k_all[i]);
			//wt->calculate_sequence_error(lowDimNeighbours, highDimNeighbours, seq_err, N, N+1, k_all[i]);
			
			// Populate final error array (obs x errors)
			for (int j = 0; j < N; j++) {
				//set_errors[j * k_all.size() + i] = set_err[j];
				per_errors[j * k_all.size() + i] = per_err[j];
				//seq_errors[j * k_all.size() + i] = seq_err[j];
			}
		}

		// Save set_errors as CSV
		//save_as_csv(set_errors, N, k_all.size(), "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/errors-set.csv");
		save_as_csv(per_errors, N, k_all.size(), "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/errors-per.csv");
		//save_as_csv(seq_errors, N, k_all.size(), "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/errors-seq.csv");

		// Calculate Levenshtein error
		//std::vector<float> lev_errors(N, 0);
		//wt->calculate_levenshtein_error(lowDimNeighbours, highDimNeighbours, lev_errors, N, (k + 1)); // d is dimensionality of the neighbourhoods which is (k+1) since it includes the point itself
		//save_as_csv(lev_errors, N, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/errors-lev.csv");

	}

	// //Calculate KL-divergence
	//{
	//	weighted_tsne::sparse_scalar_matrix P = wt->tSNE.getDistributionP(); //std::vector<hdi::data::MapMemEff<uint32_t, float>>

	//	wt->tSNE.computeLowDimensionalDistribution();
	//	std::vector<float> Q = wt->tSNE.getDistributionQ(); //std::vector<hdi::data::MapMemEff<uint32_t, float>>

	//	std::vector<float> P_out(N*N, 0);

	//	for (int i = 0; i < N; i++) {
	//		for (auto elem : P[i]) {
	//			P_out[i * N + elem.first] = elem.second;
	//		}
	//	}

	//	save_as_csv(P_out, N, N, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/P.csv");
	//	save_as_csv(Q, N, N, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/Q.csv");

		//float kld_all = 0;
		//float kld_selected = 0;

		//for (int i = 0; i < N; i++) {
		//	for (auto elem : P[i]) {
		//		kld_all += elem.second * log2(elem.second / (Q[i * N + elem.first] * wt->tSNE._normalization_Q));
		//	}
		//}

		//for (int index : selectedPoints) {
		//	for (auto elem : P[index]) {
		//		kld_selected += elem.second * log2(elem.second / Q[index * N + elem.first]);
		//	}
		//}
		//hdi::utils::secureLogValue(&log, "KL divergernce (all): ", kld_all);
		//hdi::utils::secureLogValue(&log, "KL divergernce (selected): ", kld_selected);

		//save_as_csv(std::vector<float> { kld_all, kld_selected }, 2, 1, "C:/Users/basti/Google Drive/Learning/Master Thesis/ThesisDatasets/Generated/errors-kl.csv");
	//}

	delete wt;
}

int main() {

	//SetPriorityClass(GetCurrentProcess(), IDLE_PRIORITY_CLASS);
	//SetPriorityClass(GetCurrentProcess(), ABOVE_NORMAL_PRIORITY_CLASS);

	//omp_set_num_threads(3);
	test_create_embedding();
	//test_jaccard_similarity();
	//test_test_set_error();
	//test_neighourhood_computation();

	system("pause");
}